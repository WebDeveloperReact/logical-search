# Searchgasm

## What is searchgasm?

Searchgasm is orgasmic. Maybe not orgasmic, but you will get aroused. So go grab a towel and let's dive in.

Have you ever wanted to search the database in the same manner that you use your models? This plugin does exactly that. If you know how to use ActiveRecord you already know how to use this. That's the beauty of this plugin, it brings the same power of ActiveRecord to searching without cluttering your models. Clean, simple, easy to use. Check it...

## Super Simple Example

Let's assume the following relationships: user => orders => line items

    # Set conditions
    searcher = UserSearcher.new(:first_name_contains => "Ben")
    searcher.created_at_after = Time.now
    searcher.orders.total_great_than = 100
    searcher.orders.line_items.name_contains = "Awesome"
    # Any of these can be called upon instantiation, such as "first_name_contains"
    # For a list of all conditions visit the wiki
    
    # Options on how to return the data
    searcher.per_page = 10             # set to 0 to return all, can also use "limit" instead
    searcher.page = 2
    searcher.order_by = "last_name"    # see below for "advanced" ordering
    searcher.order_as = "ASC"
    # Any of the above can be called upon instantiation
    
    # Search
    searcher.search    # => returns users matching ALL of the conditions above
    searcher.all       # => alias for search
    searcher.count
    searcher.first

There are 3 other ways to perform searches. Use whatever tickles your fancy:

    # 1
    @users = UserSearcher.search(
        :first_name_contains => "Ben",
        :created_at_after => Time.now
    )
    
    # 2
    searcher = User.new_search(:first_name_contains => "Ben")
    searcher.created_at_after = Time.now
    @users = searcher.search
    
    #3
    @users = User.search(
        :first_name_contains => "Ben",
        :created_at_after => Time.now
    )

## All features

The above examples are just the tip of the ice berg. It can do much more:

1. Plethora of conditions.
2. Pagination support, with helpers.
3. Relationships and named scopes support conditions.
4. Scope searches with relationships and named scopes.
5. Enhanced keyword searching including blacklisting non-meaningful words and other "search enhancing" features.
6. "Smart" condition building for multiple values.
7. Traverse though ALL relationships and create conditions on them.
8. Advanced ordering, order your results in complex ways easily.
9. Hooks to create you own "special" conditions.


## Ready to get started?

I highly recommend glancing at the wiki. This readme only covers the basics. The wiki goes over the features above, how to use them, and how they work.

### 1. Install the plugin

    script/plugin install git://github.com/binarylogic/searchgasm.git

### 2. Set up your configuration

Then setup your searcher configuration by adding a file in config/initializers called searchgasm.rb

    # config/initializer/searchgasm.rb
    
    Searcher::Base.configure do |config|
        # the following values are the defaults
        
        config.virtual_searchers = [:user, :order]  # list out the names of the models you wish to search
        config.per_page = 0                         # can use "limit" instead
        config.order_as = "DESC"                    # the order_by configuration depends on the model, it defaults to the primary key,
                                                    # order_by is best suited in your searcher file (see below)
        config.ignore_blanks = true
    end


### 3. Set up your searchers (optional)

If you don't want to create virtual searchers, you can create them yourself. You can just put your searcher files in your models folder, but I like to put all of my searcher files in app/searchers and in my environment.rb I add the following configuration:
  
    # config/environment.rb
    
    config.load_paths += %W( #{RAILS_ROOT}/app/searchers )

Now create app/searchers/user_searcher.rb with the following content:
  
    # app/searchers/user_searcher.rb
    
    class UserSearcher \*<\* Searchgasm::Base
        # The following configuration values are the defaults. Therefore none of the below configurations are neccessary
        # They are only neccesssary if you want to override the defaults
        
        per_page 0          # can use "limit" if you prefer
        order_by "id"
        order_as "DESC"
        ignore_blanks true
    end


### 4. Test it out

    # script/console
    
    UserSearcher.search(:first_name_contains => "Ben")

Play around with it. Check out the features above to perform different searches and discover all this plugin has to offer.


## Credits

Author: Ben Johnson of [Binary Logic](http://www.binarylogic.com)

Credit to Zack Ham and Robert Malko in helping with feature suggestions, cleaning up the readme / wiki, and cleaning up my code.


Copyright (c) 2007 Ben Johnson of [Binary Logic](http://www.binarylogic.com), released under the MIT license