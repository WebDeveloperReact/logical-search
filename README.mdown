# Searchgasm

## What is searchgasm?

Searchgasm is orgasmic. Maybe not orgasmic, but you will get aroused. So go grab a towel and let's dive in.

Have you ever wanted to search the database in the same manner that you use your models? This plugin does exactly that. If you know how to use ActiveRecord you already know how to use this. That's the beauty of this plugin, it brings the same power of ActiveRecord to searching without cluttering your models. Clean, simple, easy to use. Check it...

## Do we really need another search plugin?

The answer is YES, and here's why:

1. None of the plugins I found solved the problem I was having: DRYing up my controllers and views. You can't get more DRY than 1 line of code in your controller: @users = UserSearcher.search(params[:search])

2. This plugin won't clutter up your models. Just like observers, you have searchers. Their sole purpose is to search a model. Any configuration or code dealing with searching will be in this file. Keeping everything nice, clean, and organized.

3. Because conditions can be called like ActiveRecord attributes, you can integrate easily with rails helpers. Such as form\_for and fields\_for. Wouldn't it be nice to use your form builder for your search forms and not just your model forms? What if you need to add a condition to a search form? Just add the field in the form and you're done.

4. One plugin to do it all. I don't need a plugin for searching, a plugin for paginating, a plugin for data tables, etc. This plugin handles it all from searching, paginating, ordering, etc. And it's simple.

## Super Simple Example

    searcher = UserSearcher.new(:first_name_contains => "Ben")
    searcher.created_at_after = Time.now
    @users = searcher.search
    # Any condition can be called upon instantiation or as an attribute, for a list of all conditions visit the wiki

There are 3 other ways to perform the exact same search. Use whatever tickles your fancy:

    # 1
    @users = UserSearcher.search(
        :first_name_contains => "Ben",
        :created_at_after => Time.now
    )
    
    # 2
    searcher = User.new_search(:first_name_contains => "Ben")
    searcher.created_at_after = Time.now
    @users = searcher.search
    
    #3
    @users = User.search(
        :first_name_contains => "Ben",
        :created_at_after => Time.now
    )

## All features

1. A plethora of conditions for ALL columns in a model. (See a all available conditions)
2. Use the same conditions when setting up your relationships or named scopes.
3. Scope searches with relationships and named scopes.
4. Enhanced keyword searching including blacklisting non-meaningful words and other "search enhancing" features. (Read more)
5. "Smart" condition building for multiple values. (Read more)
6. Traverse though ALL relationships and create conditions on them. (Read more)
7. Advanced ordering, order your results in complex ways easily. (Read more)
8. Super simple pagination support, with helpers to make your views a breeze. (Read more)
9. Hooks to create you own "special" conditions. (Read more)

## Ready to get started?

I highly recommend glancing at the wiki. This readme only covers the basics. The wiki goes over the features above, how to use them, and how they work.

### 1. Install the plugin

    script/plugin install git://github.com/binarylogic/searchgasm.git

### 2. Set up your configuration

Then setup your searcher configuration by adding a file in config/initializers called searchgasm.rb

    # config/initializer/searchgasm.rb
    
    Searcher::Base.configure do |config|
        # the following values are the defaults
        
        config.virtual_searchers = [:user, :order]  # list out the names of the models you wish to search
        config.per_page = 0                         # can use "limit" instead
        config.order_as = "DESC"                    # the order_by configuration depends on the model, it defaults to the primary key,
                                                    # order_by is best suited in your searcher file (see below)
        config.ignore_blanks = true
    end


### 3. Set up your searchers (optional)

If you don't want to create virtual searchers, you can create them yourself. You can just put your searcher files in your models folder, but I like to put all of my searcher files in app/searchers and in my environment.rb I add the following configuration:
  
    # config/environment.rb
    
    config.load_paths += %W( #{RAILS_ROOT}/app/searchers )

Now create app/searchers/user_searcher.rb with the following content:
  
    # app/searchers/user_searcher.rb
    
    class UserSearcher < Searchgasm::Base
        # The following configuration values are the defaults. Therefore none of the below configurations are neccessary
        # They are only neccesssary if you want to override the defaults
        
        per_page 0          # can use "limit" if you prefer
        order_by "id"
        order_as "DESC"
        ignore_blanks true
    end


### 4. Test it out

    # script/console
    
    UserSearcher.search(:first_name_contains => "Ben")

Play around with it. Check out the features above to perform different searches and discover all this plugin has to offer.


## Credits

Author: Ben Johnson of [Binary Logic](http://www.binarylogic.com)

Credit to Zack Ham and Robert Malko in helping with feature suggestions, cleaning up the readme / wiki, and cleaning up my code.


Copyright (c) 2007 Ben Johnson of [Binary Logic](http://www.binarylogic.com), released under the MIT license