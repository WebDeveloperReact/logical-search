# Searchgasm

## What is searchgasm?

Searchgasm is orgasmic. Maybe not orgasmic, but you will get aroused. So go grab a towel and let's dive in.

Searchgasm makes writing conditions, paginating, ordering, and integrating with search forms a breeze. The best way to understand what this can do is with a few examples...

## Examples

To prep our examples, let's assume we have the following relationship chain: account => user => orders => line items

### Basic Searching
    Account.all(:conditions => {:name => "Binary Logic", :website_contains => "binarylogic.com", :created_at_after => Time.now})
    Account.first(:conditions => {:name => "Binary Logic", :website_contains => "binarylogic.com", :created_at_after => Time.now})
    Account.count(:conditions => {:name => "Binary Logic", :website_contains => "binarylogic.com", :created_at_after => Time.now})
    Account.maximum('id', :conditions => {:name => "Binary Logic", :website_contains => "binarylogic.com", :created_at_after => Time.now})
    Account.minimum('id', :conditions => {:name => "Binary Logic", :website_contains => "binarylogic.com", :created_at_after => Time.now})
    Account.sum('id', :conditions => {:name => "Binary Logic", :website_contains => "binarylogic.com", :created_at_after => Time.now})
    Account.aveerage('id', :conditions => {:name => "Binary Logic", :website_contains => "binarylogic.com", :created_at_after => Time.now})

### Pagination and advanced ordering
    Account.all(:conditions => {
        :website_contains => "binarylogic.com"},
        :page => 2,
        :per_page => 20,
        :order_by => {
            :users => {
                :orders => :total
            }
        },
        :order_as => "ASC"
    )

No need to password the :include option for the relationships in the "order\_by" option, this is done automatically for you.

### Traversing through relationships
    Account.all(:conditions => {
        :users => {
            :order => {
                :line_items => {
                    :total_gt => 100,
                    :description_keywords => "macbook intel core duo"
                }
            }
        }
    })

As stated above, no need to pass the :include option for the relationships, this is done for you

### Scoped searching
    @current_users.orders.find(:all, :conditions => {:total_lte => 500})
    @current_users.orders.count(:conditions => {:total_lte => 500})
    @current_users.orders.sum('total', :conditions => {:total_lte => 500})

These are only a few of the methods you can use. Any of the methods you can call on a non-scoped object, can be called on a scoped object as well.

### Searching with an object, great for using in form\_for or fields\_for
    @searcher = Account.new_search
    @searcher.name = "Binary Logic"
    @searcher.website_contains = "binarylogic.com"
    @searcher.created_at_after = Time.now
    @searcher.users.orders.line_items.total_gt = 100
    @searcher.all    # => returns all records
    @searcher.search # => alias for "all"
    @searcher.first  # => returns only first record
    @searcher.count  # => performs count query with conditions

All conditions called on an object can be call upon instantiation as well:

    searcher = Account.new_search(:name => "Binary Logic", :website_contains => "binarylogic.com", :created_at_after => Time.now)

Check out the view:

    <%= form_for @searcher, :url => accounts_path do |f| %>
        <%= f.text_field :name_contains %>
        <%= f.calendar_date_select :create_at_after %>
        # Insert any condition here with whatever form element you want
        <%= f.submit "Search" %>
    <% end %>

### Same as above, but with a block
    searcher = Account.new_search do |s|
        s.name = "Binary Logic"
        s.website_contains = "binarylogic.com"
        s.created_at_after = Time.now
        s.users.orders.line_items.total_gt = 100
    end

### Search via params

As I mentioned above the new\_search method is great for creating object and using them in form\_for or fields\_for. How about passing in the params from the form directly to run the search?

    accounts = Account.search(params[:search])

"search" if a safe method for passing in params. I'm sure you know this, but I have to say it: *DO NOT* pass params into the "find", "all", or "first" method, you opening yourself up to SQL injections. "search" does various checks to ensure it is not possible to inject SQL.

    # DO NOT DO THIS!
    accounts = Account.all(params[:search])
    
    # OR THIS!
    accounts = Account.all(:conditions => params[:conditions])

## Conditions Available Everywhere

Not only can you use conditions when searching, but you can use them when setting up relationships or name scopes:

    class User < ActiveRecord::Base
        has_many :expensive_pending_orders, :conditions => {:total_greater_than => 1_000_000, :state => :pending}
        named_scope :sexy, :conditions => {:first_name => "Ben", email_ends_with => "binarylogic.com"}
    end

## Available Conditions

Depending on the column type it comes preloaded with a bunch of nifty conditions:

    all columns
    => :equals, :does_not_equal
    
    :string, :text
    => :begins_with, :contains, :keywords, :ends_with
    
    :integer, :float, :decimal,:datetime, :timestamp, :time, :date
    => :greater_than, :greater_than_or_equal_to, :less_than, :less_than_or_equal_to

Some of these conditions come with aliases, so you have your choice how to call the conditions. For example you can use "greater\_than" or "gt":

    :equals;                    => :is
    :does_not_equal             => :is_not
    :begins_with                => :starts_with
    :contains                   => :like
    :greater_than               => :gt, :after (only for date and time columns)
    :greater_than_or_equal_to   => :at_least, :gte
    :less_than                  => :lt, :before (only for date and time columns)
    :less_than_or_equal_to      => :at_most, :lte

### Enhanced searching and blacklisted words
You will notice above there is "contains" and "keywords". The difference is that "keywords" is an enhanced search. It acts like a real keyword search. It finds those keywords, in any order, and blacklists meaningless words such as "and", "the", etc. "contains" merely find that EXACT string in the column you are searching.

## Credits

Author: Ben Johnson of [Binary Logic](http://www.binarylogic.com)

Credit to Zack Ham and Robert Malko for helping with feature suggestions, cleaning up the readme / wiki, and cleaning up my code.


Copyright (c) 2008 Ben Johnson of [Binary Logic](http://www.binarylogic.com), released under the MIT license
